export interface {{classname}}{{#hasTypeInputs}}<{{/hasTypeInputs}}{{#typeInputs}}{{.}} = any{{^-last}}, {{/-last}}{{/typeInputs}}{{#hasTypeInputs}}>{{/hasTypeInputs}} {{#parent}}extends {{{parent}}} {{/parent}}{
{{#additionalPropertiesType}}
    [key: string]: {{{additionalPropertiesType}}}{{#hasVars}} | any{{/hasVars}};

{{/additionalPropertiesType}}
{{#vars}}
    {{#description}}
    /**
     * {{{description}}} 
     */
    {{/description}}
    {{name}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{^dataTypeModel}}{{{datatype}}}{{/dataTypeModel}}{{#dataTypeModel}}{{#containerType}}Array<{{/containerType}}{{classname}}{{#hasTypeInputs}}<{{/hasTypeInputs}}{{#typeInputs}}{{.}}{{^-last}}, {{/-last}}{{/typeInputs}}{{#hasTypeInputs}}>{{/hasTypeInputs}}{{#containerType}}>{{/containerType}}{{/dataTypeModel}}{{/isEnum}};
{{/vars}}
}{{#hasEnums}}
export namespace {{classname}} {
{{#vars}}
    {{#isEnum}}
    export type {{enumName}} = {{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}} | {{/-last}}{{/enumVars}}{{/allowableValues}};
    export const {{enumName}} = {
    {{#allowableValues}}
    {{#enumVars}}
        {{name}}: {{{value}}} as {{enumName}}{{^-last}},{{/-last}}
    {{/enumVars}}
    {{/allowableValues}}
    }
    {{/isEnum}}
{{/vars}}
}{{/hasEnums}}