export as namespace OrderCloudSDK;
{{#models}}{{#model}}{{^isPartial}}
export interface {{classname}}{{#hasTypeInputs}}<{{/hasTypeInputs}}{{#typeInputs}}{{.}} = any{{^-last}}, {{/-last}}{{/typeInputs}}{{#hasTypeInputs}}>{{/hasTypeInputs}} {{#parent}}extends {{{parent}}} {{/parent}}{
{{#vars}}
    {{baseName}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{^dataTypeModel}}{{{vendorExtensions.x-typescript-type}}}{{/dataTypeModel}}{{#dataTypeModel}}{{#containerType}}Array<{{/containerType}}{{classname}}{{#hasTypeInputs}}<{{/hasTypeInputs}}{{#typeInputs}}{{.}}{{^-last}}, {{/-last}}{{/typeInputs}}{{#hasTypeInputs}}>{{/hasTypeInputs}}{{#containerType}}>{{/containerType}}{{/dataTypeModel}}{{/isEnum}};
{{/vars}}
}
{{/isPartial}}{{/model}}{{/models}}

interface SdkInstance {
    baseApiPath: string;
    baseAuthPath: string;
    defaultHeaders: any;
    impersonation: boolean;
    timeout: number;
    authentications: {
        oauth2: {
            type: 'basic' | 'apiKey' | 'oauth2';
            accessToken: string;
            impersonationToken: string;
        }
        
    }
}

export type ApiRole = "ApiClientAdmin" | "ApiClientReader" | "AddressAdmin" | "AddressReader" | "AdminAddressAdmin" | "AdminAddressReader" | "AdminUserAdmin" | "AdminUserGroupAdmin" | "AdminUserGroupReader" | "AdminUserReader" | "ApprovalRuleAdmin" | "ApprovalRuleReader" | "BuyerAdmin" | "BuyerImpersonation" | "BuyerReader" | "BuyerUserAdmin" | "BuyerUserReader" | "CatalogAdmin" | "CatalogReader" | "CategoryAdmin" | "CategoryReader" | "CostCenterAdmin" | "CostCenterReader" | "CreditCardAdmin" | "CreditCardReader" | "FullAccess" | "IncrementorAdmin" | "IncrementorReader" | "InventoryAdmin" | "MeAddressAdmin" | "MeAdmin" | "MeCreditCardAdmin" | "MessageConfigAssignmentAdmin" | "MeXpAdmin" | "OrderAdmin" | "OrderReader" | "OverrideShipping" | "OverrideTax" | "OverrideUnitPrice" | "PasswordReset" | "PriceScheduleAdmin" | "PriceScheduleReader" | "ProductAdmin" | "ProductAssignmentAdmin" | "ProductFacetAdmin" | "ProductFacetReader" | "ProductReader" | "PromotionAdmin" | "PromotionReader" | "SetSecurityProfile" | "ShipmentAdmin" | "ShipmentReader" | "Shopper" | "SpendingAccountAdmin" | "SpendingAccountReader" | "SupplierAddressAdmin" | "SupplierAddressReader" | "SupplierAdmin" | "SupplierReader" | "SupplierUserAdmin" | "SupplierUserGroupAdmin" | "SupplierUserGroupReader" | "SupplierUserReader" | "UnsubmittedOrderReader" | "UserGroupAdmin" | "UserGroupReader";

export interface DecodedToken {
  /**
   * the ordercloud username
   */
  usr: string;

  /**
   * the client id used when making token request
   */
  cid: string;

  /**
   * helpful for identifying user types in an app
   * that may have both types
   */
  usrtype: 'admin' | 'buyer' | 'supplier';

  /**
   * list of security profile roles that this user
   * has access to, read more about security profile roles
   * [here](https://developer.ordercloud.io/documentation/platform-guides/authentication/security-profiles)
   */
  role: ApiRole[];

  /**
   * the issuer of the token - should always be https://auth.ordercloud.io
   */
  iss: string;

  /**
   * the audience - who should be consuming this token
   * this should always be https://api.ordercloud.io (the ordercloud api)
   */
  aud: string;

  /**
   * expiration of the token (in seconds) since the
   * UNIX epoch (January 1, 1970 00:00:00 UTC)
   */
  exp: number;

  /**
   * point at which token was issued (in seconds) since the
   * UNIX epoch (January 1, 1970 00:00:00 UTC)
   */
  nbf: number;

  /**
   * the order id assigned to the anonymous user,
   * this value will *only* exist for anonymous users
   */
  orderid?: string;
}

export namespace Sdk {
    export let instance: SdkInstance;
}

/**
* Will use the impersonation token for the following call
* for example: OrderCloudSDK.As().Me.ListProducts(); will list
* products for the user being impersonated
*/
// @ts-ignore
export function As(): typeof OrderCloudSDK

export namespace Auth {

    /**
    * @param username username of the user logging in
    * @param password password of the user logging in
    * @param clientID clientID of the application the user is logging into
    * @param scope security profile roles being requested
    */
    export function Login(username: string, password: string, clientID: string, scope: ApiRole[]): Promise<AccessToken>

    /**
    * @param clientSecret of the application
    * @param username of the user logging in
    * @param password of the user logging in
    * @param clientID of the application the user is logging into
    * @param scope security profile roles being requested
    */
    export function ElevatedLogin(clientSecret: string, username: string, password: string, clientID: string, scope: ApiRole[]): Promise<AccessToken>

    /**
    * @param clientSecret of the application
    * @param clientID of the application the user is logging into
    * @param scope security profile roles being requested
    */
    export function ClientCredentials(clientSecret: string, clientID: string, scope: ApiRole[]): Promise<AccessToken>

    /**
    * @param refreshToken of the application
    * @param clientID of the application the user is logging into
    * @param scope security profile roles being requested
    */
    export function RefreshToken(refreshToken: string, clientID: string, scope: ApiRole[]): Promise<AccessToken>

    /**
    * @param clientID of the application the user is logging into
    * @param scope security profile roles being requested
    */
    export function Anonymous(clientID: string, scope: ApiRole[]): Promise<AccessToken>
}

{{#apiInfo}}{{#apis}}{{#operations}}
export namespace {{classname}} {

    {{#operation}}
    /**{{#allParams}}
    * @param {{^isQueryParam}}{{paramName}} {{description}}{{/isQueryParam}}{{#isQueryParam}}options.{{paramName}} {{description}}{{/isQueryParam}}{{/allParams}}
    * @param accessToken Provide an alternative token to the one stored in the sdk instance (useful for impersonation)
    */
    export function {{operationId}}({{#allParams}}{{^isQueryParam}}{{paramName}}: {{#isPrimitiveType}}{{vendorExtensions.x-typescript-type}}{{/isPrimitiveType}}{{^isPrimitiveType}}Partial<{{vendorExtensions.x-typescript-type}}>{{/isPrimitiveType}}{{#hasMore}}, {{/hasMore}}{{#hasQueryParams}}{{#isBodyParam}}, {{/isBodyParam}}{{/hasQueryParams}}{{/isQueryParam}}{{/allParams}}{{^hasQueryParams}}{{/hasQueryParams}}{{#hasQueryParams}}options?: { {{#queryParams}}{{paramName}}?: {{vendorExtensions.x-typescript-type}}{{#hasMore}}, {{/hasMore}}{{/queryParams}} }{{/hasQueryParams}}{{#hasParams}},{{/hasParams}} accessToken?: string): Promise<{{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}void{{/returnType}}>    
    
    {{/operation}}
}
{{/operations}}{{/apis}}{{/apiInfo}}