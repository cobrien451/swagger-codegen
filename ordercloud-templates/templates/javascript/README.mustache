# {{projectName}}

{{moduleName}} - JavaScript SDK for {{projectName}}

OrderCloud.io is a cloud-hosted B2B eCommerce platform exposed entirely via a RESTful API. When combined with 
our extensive library of components, SDKs, and deployment tools, it enables rapid development of custom, secure, 
and scalable B2B eCommerce solutions. Spin up a fully functional B2B app in minutes, and customize it to limits 
of your imagination.

This SDK is automatically generated by the [Swagger Codegen](https://github.com/swagger-api/swagger-codegen) project:

- API version: {{appVersion}}
- Package version: {{projectVersion}}
- Build date: {{generatedDate}}

{{#infoUrl}}
For more information, please visit [https://documentation.ordercloud.io](https://documentation.ordercloud.io/platform-guides/getting-started/introduction-to-ordercloud)
{{/infoUrl}}

## Installation

#### npm

```shell
npm install ordercloud-javascript-sdk --save
```

## Authentication 

We'll need to get a token before we can make any API calls. The platform offers four different
[auth workflows](https://documentation.ordercloud.io/platform-guides/authentication/oauth2-workflows) 
all found under the [Auth class](https://github.com/ordercloud-api/OrderCloud-JavaScript-SDK/blob/staging/src/api/Auth.js).

We'll use the password-grant type for this example.

```javascript
var OrderCloud = require('ordercloud-javascript-sdk')
var defaultClient = OrderCloud.Sdk.instance;

var username = 'YOUR_USERNAME'; //username of the user logging in
var password = 'YOUR_PASSWORD'; //password of the user logging in
var clientID = 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'; //clientID of the application the user is logging in to ([sign up for free](https://account.ordercloud.io/login/)
var scope = ['FullAccess']; //string array of roles the application has access to ([more info](https://documentation.ordercloud.io/platform-guides/authentication/security-profiles)) 

return OrderCloud.Auth.Login(username, password, clientID, scope)
  .then(response => {
    //store token, now any subsequent calls will automatically set this token in the headers for you
    defaultClient.authentications['oauth2'].accessToken = token;
  })
  .catch(err => console.log(err));
```

## Example

After following the [authentication](#Authentication) instructions we can make any API
call very easily.

Let's get the currently authenticated user's details with a Me.Get()

```javascript
return OrderCloudSDK.Me.Get()
  .then(user => console.log("This user's name is " + user.FirstName + " " + user.LastName))
```

## Filtering

All of the [filtering options](https://developer.ordercloud.io/documentation/platform-guides/basic-api-features/filtering)  you love from the API are available through the SDK as well. Simply pass in a key/value pair to the filters object on list calls where the `key` is any top-level API model *or* a custom indexed xp value and the `value` is the value you'd like to filter on.

Let's run through a couple scenarios and what the call will look like with the SDK:

My products where xp.Featured is true
``` javascript
return OrderCloudSDK.Me.ListProducts({filters: {'xp.Featured': true})
  .then(productList => console.log(productList));
```

My orders submitted after April 20th, 2018
```javascript
return OrderCloudSDK.Me.ListOrders( {filters: {DateSubmitted: '>2018-04-20'}})
  .then(orderList => console.log(orderList))
```

Users with the last name starting with Smith:
``` javascript
return OrderCloudSDK.Users.List('my-mock-buyerid', {filters: {LastName: 'Smith*'})
  .then(userList => console.log(userList));
```

Users with the last name starting with Smith *or* users with the last name *ending* with Jones 
```javascript
return OrderCloudSDK.Users.List('my-mock-buyerid', {filters: {LastName: 'Smith*|*Jones'}})
  .then(userList => console.log(userList));
```

Products where xp.Color is not red *and* not blue
```javascript
return OrderCloudSDK.Products.List({filters: {'xp.Color': ['!red', '!blue']}});
```

And of course you can mix and match filters to your heart's content.

## Impersonation
Impersonation allows a seller user to make an api call on behalf of another user. The SDK enables this in two different ways, both tackling different use cases. 

The first method we'll talk about is best suited when you need to toggle between just two users during a session. You'll simply get an impersonation token, set it and then use the As() method to flag the SDK that you want to use the impersonated token.
```javascript
var OrderCloudSDK = require('ordercloud-javascript-sdk')
var defaultClient = OrderCloud.Sdk.instance;

// set regular token
var myToken = 'YOUR_TOKEN';
defaultClient.authentications['oauth2'].accessToken = myToken;

// set impersonation token
var myImpersonationToken = 'YOUR_IMPERSONATED_TOKEN'
defaultClient.authentications['oauth2'].impersonationToken = myImpersonationToken;

// Get products for regular user
OrderCloudSDK.As().Me.ListProducts()
  .then(productList => console.log(productList))


// Get products for the impersonated user
OrderCloudSDK.As().Me.ListProducts()
  .then(impersonatedProductList => console.log(impersonatedProductList))
```

As you can see this method makes it very easy to toggle between impersonated calls and non-impersonated calls. But what if you have more than two tokens to toggle between? To address that scenario we recommend using the optional accessToken parameter available on all calls.

```javascript
var OrderCloud = require('ordercloud-javascript-sdk')
var token1 = 'USER1_TOKEN';
var token2 = 'USER2_TOKEN';
var token3 = 'USER3_TOKEN';

// Get products for user 1
OrderCloudSDK.Me.ListProducts(null, token1)
  .then(user1ProductList => console.log(user1ProductList))

// Get products for user 2
OrderCloudSDK.Me.ListProducts(null, token2)
  .then(user2ProductList => console.log(user2ProductList))

// Get products for user 3
OrderCloudSDK.Me.ListProducts(null, token3)
  .then(user3ProductList => console.log(user3ProductList))
```

Please note that the accessToken parameter will always be the last parameter.


## Typescript Support
This package is fully compatible with typescript and comes bundles with its own definition files. Using this with typescript couldn't be easier!

## Further Reading

You should now have enough information to get started building on our platform! The platform guides[https://documentation.ordercloud.io/platform-guides] and [API reference](https://documentation.ordercloud.io/api-reference)
should be your go-to guide for working with the API.


## Documentation for API Endpoints

All URIs are relative to *{{basePath}}*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}*{{moduleName}}.{{classname}}* | [**{{operationId}}**]({{apiDocPath}}{{classname}}.md#{{operationId}}) | **{{httpMethod}}** {{path}} | {{#summary}}{{summary}}{{/summary}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

## Documentation for Models

{{#models}}{{#model}} - [{{moduleName}}.{{classname}}]({{modelDocPath}}{{classname}}.md)
{{/model}}{{/models}}

## Documentation for Authorization

{{^authMethods}} All endpoints do not require authorization.
{{/authMethods}}{{#authMethods}}{{#last}} Authentication schemes defined for the API:{{/last}}{{/authMethods}}
{{#authMethods}}### {{name}}

{{#isApiKey}}- **Type**: API key
- **API key parameter name**: {{keyParamName}}
- **Location**: {{#isKeyInQuery}}URL query string{{/isKeyInQuery}}{{#isKeyInHeader}}HTTP header{{/isKeyInHeader}}
{{/isApiKey}}
{{#isBasic}}- **Type**: HTTP basic authentication
{{/isBasic}}
{{#isOAuth}}- **Type**: OAuth
- **Flow**: {{flow}}
- **Authorization URL**: {{authorizationUrl}}
- **Scopes**: {{^scopes}}N/A{{/scopes}}
{{#scopes}}  - {{scope}}: {{description}}
{{/scopes}}
{{/isOAuth}}

{{/authMethods}}
